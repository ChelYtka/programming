name: 'C++ CI'

on:
  push:
    branches:
      - main
      - feature/github_actions

jobs:

  build-linux:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:

      - uses: actions/checkout@v3
        with:
          submodules: true


      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libboost-test-dev


      - name: Configure project
        run: cmake . -DPATCH_VERSION=${{ github.run_number }}


      - name: Build project
        run: cmake --build .


      - name: Run tests
        run: cmake --build . --target test


      - name: Package for Linux
        run: cmake --build . --target package


      - name: Check if tag exists
        run: |
          if git rev-parse "refs/tags/v${{ github.run_number }}-linux" >/dev/null 2>&1; then   # Проверяет, существует ли тег для текущей сборки Linux
            echo "Tag exists for Linux. Exiting..."   # Выводит сообщение, если тег существует
            exit 0   # Выходит из job, если тег найден
          fi


      - name: Create Release for Linux
        id: create_release_linux
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}-linux
          release_name: Release ${{ github.run_number }} for Linux
          draft: false
          prerelease: false


      - name: Upload Linux Release Asset
        id: upload_release_asset_linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_linux.outputs.upload_url }}
          asset_path: ./helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_name: helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Create Boost directory
        run: mkdir ./boost

      - name: Download Boost Archive
        run: curl -L https://boostorg.jfrog.io/artifactory/main/release/1.86.0/source/boost_1_86_0.zip -o ./boost/boost_1_86_0.zip

      - name: Extract Boost Archive
        run: unzip -o ./boost/boost_1_86_0.zip -d ./boost

      # Debug Boost Environment Variables before setting them
      - name: Debug Boost Environment Variables Before Setting Them
        run: |
          echo "Current Directory is $(pwd)"
          ls ./boost/boost_1_86_0

      # Set environment variables after extracting Boost and ensure they are correct.
      - name: Set Boost Environment Variables
        run: |
          echo "BOOST_ROOT=$(pwd)/boost/boost_1_86_0" >> $GITHUB_ENV
          echo "Boost_INCLUDE_DIR=$(pwd)/boost/boost_1_86_0" >> $GITHUB_ENV
          echo "Boost_LIBRARYDIR=$(pwd)/boost/boost_1_86_0/stage/lib" >> $GITHUB_ENV

      # Debug Boost Environment Variables after setting them to ensure they are set correctly.
      - name: Debug Boost Environment Variables After Setting Them
        run: |
          echo "BOOST_ROOT is set to: $BOOST_ROOT"
          echo "Boost_INCLUDE_DIR is set to: $Boost_INCLUDE_DIR"
          echo "Boost_LIBRARYDIR is set to: $Boost_LIBRARYDIR"

      - name: Configure project with Boost settings
        run: cmake . -DPATCH_VERSION=${{ github.run_number }} -DBOOST_ROOT=${{ env.BOOST_ROOT }}

      - name: Build project
        run: cmake --build .

      - name: Run tests
        run: cmake --build . --target test

      - name: Package for Windows
        run: cmake --build . --target package

      # Create Release for Windows with correct syntax for the upload URL.
      - name: Create Release for Windows
        id: create_release_windows
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}

      # Upload Release Asset for Windows with corrected syntax.
      - name: Upload Release Asset for Windows
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url:${{ steps.create_release_windows.outputs.upload_url }}
          asset_path=./helloworld-0.0.${{ github.run_number }}-Windows.msi
          asset_name=helloworld-0.0.${{ github.run_number }}-Windows.msi
          asset_content_type=application/x-msi